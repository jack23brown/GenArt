---
title: "Lab 9"
author: "Jack Brown"
format: html
editor: visual
---

## Lab 9 - Generative Art

```{r}
library(ggplot2)
library(tibble)
library(dplyr)
library(usethis)
```

## Part 1

```{r}
sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]
}
```

```{r}
sample_data <- function(seed = NULL, n = 100){
  if(!is.null(seed)) set.seed(seed)
  dat <- tibble(
    x0 = runif(n),
    y0 = runif(n),
    x1 = x0 + runif(n, min = -.2, max = .2),
    y1 = y0 + runif(n, min = -.2, max = .2),
    shade = runif(n), 
    size = runif(n),
    shape = factor(sample(0:22, size = n, replace = TRUE))
  )
}
```

```{r}
polar_styled_plot <- function(data = NULL, palette) {
  ggplot(
    data = data,
    mapping = aes(
      x = x0,
      y = y0,
      xend = x1,
      yend = y1,
      colour = shade,
      size = size
    )) + 
    coord_polar(clip = "off") +
    scale_y_continuous(
      expand = c(0, 0),
      limits = c(0, 1), 
      oob = scales::oob_keep
    ) +
    scale_x_continuous(
      expand = c(0, 0), 
      limits = c(0, 1), 
      oob = scales::oob_keep
    ) + 
    scale_colour_gradientn(colours = palette) + 
    scale_size(range = c(0, 10)) + 
    theme_void() + 
    guides(
      colour = guide_none(),
      size = guide_none(),
      fill = guide_none(),
      shape = guide_none()
    )
}
```

```{r}
dat1 <- sample_data(n = 500, seed = 123) |>
  mutate(y1 = y0, size = size / 2)

dat2 <- sample_data(n = 350, seed = 35) |>  
  mutate(y0 = .3 + y0 * .6, y1 = .3)

dat3 <- as.data.frame(list(x1=0,y1=0))

polar_styled_plot(palette = c("cyan", "white", "gold")) + 
  geom_segment(data = dat1) + 
  geom_segment(data = dat1 |> mutate(y1 = y1 - .2, y0 = y0 - .2)) +
  geom_segment(data = dat1 |> mutate(y1 = y1 - .4, y0 = y0 - .4)) + 
  geom_segment(
    data = dat2 |> mutate(size = size / 10), 
    lineend = "round", 
    colour = "green3"
  ) +
  geom_segment(
    data = dat2 |> mutate(size = size / 40), 
    lineend = "round", 
    colour = "green4"
  )  + geom_point(data=dat3, aes(x1,y1), size = 32, col="brown")
```

**360 Bird's Eye View of a Palm Tree on the Beach:** This piece of digital art offers a modern and contemporary take on a rather ordinary sight for a California kid: a palm tree on the beach. The perspective is from a bird's eye view, looking directly down on the palm tree from the top of it. It is also reminiscent of the view one would get when using a 360 degree camera, in which it wraps the entire picture to make everything look circular and around, as if you were on top of the world.

I combined several different elements of the examples using the polar_styled_plot() command provided in the generative art article, and then really just tried to combine them all. Once combined, I mainly changed the parameter n to a smaller number (to 500 from 2000) to get a less hectic and busy base of sand and water. I also changed the divisor in the size parameter in the mutate() function for dat1 and dat2 to try to obtain the best looking palm leaves. Finally, I of course altered the colors to mimic the golden sand and light blue water of the beach, as well as the dark green colors of palm tree laeves. I then made my own dataset "dat3" to add a simple brown circle in the middle using geom_point that acts as the center trunk/stem of the palm tree.

## Part 2

```{r}
library(rayshader)
library(tibble)
library(ambient)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(tictoc)
library(dplyr)
```

```{r}
is_within_circle <- function(x_coord, y_coord, x_center, y_center, radius) {
  (x_coord - x_center)^2 + (y_coord - y_center)^2 < radius^2
}
```

```{r}
additive_circles <- function(n = 5, pixels = 1000, seed = NULL) {
  
  if(!is.null(seed)) set.seed(seed)
  
  # setup canvas
  art <- long_grid(
    x = seq(0, 1, length.out = pixels),
    y = seq(0, 1, length.out = pixels)
  )
  art$paint <- 0
  
  for(i in 1:n) {
    
    # sample a random circle
    x_center <- runif(1, min = .3, max = .7)
    y_center <- runif(1, min = .3, max = .7)
    radius <- runif(1, min = .05, max = .25)
    
    # add +1 to all points inside the circle
    art <- art |>
      mutate(
        paint = paint + is_within_circle(
          x, y, x_center, y_center, radius
        )
      )
  }
  
  # normalise paint to [0, 1] range and return
  art$paint <- normalise(art$paint)
  return(art)
}
```
